{"version":3,"sources":["components/EmployeesBirthdayView.module.css","components/Employees.module.css","components/Birthdays.module.css","store/api.ts","store/middleware/api.ts","store/employees.ts","store/entities.ts","store/reducer.ts","store/store.ts","components/ui/Loading.tsx","hooks.ts","components/EmployeeItem.tsx","components/EmployeeGroup.tsx","components/Employees.tsx","components/BirthdayItem.tsx","components/BirthdayGroup.tsx","components/Birthdays.tsx","components/EmployeesBirthdayView.tsx","App.tsx","index.tsx"],"names":["module","exports","apiCallBegan","createAction","apiCallSuccess","apiCallFailed","api","dispatch","next","action","a","type","actions","payload","url","method","data","onStart","onSuccess","onError","axios","request","baseURL","response","message","slice","createSlice","name","initialState","list","loading","reducers","employeesRequested","employees","employeesRequestFailed","employeesReceived","employeeStatusChanged","index","findIndex","empl","id","activeStatus","status","getEmployees","createSelector","state","entities","getActiveEmployees","filter","employeesPersistConfig","key","storage","combineReducers","persistReducer","employeesReducer","entitiesReducer","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","Loading","useAppDispatch","useDispatch","useAppSelector","useSelector","EmployeeItem","firstName","lastName","isActive","handleChange","e","target","value","changeEmployeeStatus","style","color","checked","onChange","EmployeeGroup","title","length","map","emp","Employees","useState","employeeGroups","setEmployeeGroups","useEffect","getState","groupsByAlphabet","aCode","charCodeAt","i","currChar","String","fromCharCode","filteredEmployees","toUpperCase","sort","b","localeCompare","group","push","groupByAlphabet","className","clss","BirthdayItem","dob","moment","format","BirthdayGroup","employee","Birthdays","birthdayGroups","setBirthdayGroups","groupsByMonth","offset","month","numMonth","groupByMonth","birthdays","EmployeesBirthdayView","container","persistor","persistStore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,UAAY,yCAAyC,UAAY,yCAAyC,UAAY,2C,mBCAxID,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,UAAY,+B,mBCA/DD,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,UAAY,+B,wKCWlDC,EAAeC,YAA0B,iBACzCC,EACXD,YAAiC,mBACtBE,EAAgBF,YAAiC,kBCwB/CG,EA/Bb,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACA,SAAAC,GAAI,8CACJ,WAAMC,GAAN,6BAAAC,EAAA,yDACMD,EAAOE,OAASC,EAAqBD,KAD3C,yCACwDH,EAAKC,IAD7D,gBAG6DA,EAAOI,QAA1DC,EAHV,EAGUA,IAAKC,EAHf,EAGeA,OAAQC,EAHvB,EAGuBA,KAAMC,EAH7B,EAG6BA,QAASC,EAHtC,EAGsCA,UAAWC,EAHjD,EAGiDA,QAE3CF,GAASV,EAAS,CAAEI,KAAMM,IAC9BT,EAAKC,GANP,kBAS2BW,IAAMC,QAAQ,CACnCC,QAfQ,2DAgBRR,MACAC,SACAC,SAbN,OASUO,EATV,OAeIhB,EAASK,EAAuBW,EAASP,OAErCE,GACFX,EAAS,CAAEI,KAAMO,EAAWL,QAASU,EAASP,OAlBpD,kDAqBIT,EAASK,EAAsB,KAAMY,UAEjCL,GACFZ,EAAS,CAAEI,KAAMQ,EAASN,QAAS,KAAMW,UAxB/C,0DADI,wD,+BCOAC,EAAQC,YAAY,CACxBC,KAAM,YACNC,aAPmC,CACnCC,KAAM,GACNC,SAAS,GAMTC,SAAU,CACRC,mBAAoB,SAAAC,GAClBA,EAAUH,SAAU,GAEtBI,uBAAwB,SAAAD,GACtBA,EAAUH,SAAU,GAEtBK,kBAAmB,SAACF,EAAWxB,GAC7BwB,EAAUJ,KAAOpB,EAAOI,QACxBoB,EAAUH,SAAU,GAEtBM,sBAAuB,SACrBH,EACAxB,GAEA,IAAM4B,EAAQJ,EAAUJ,KAAKS,WAC3B,SAAAC,GAAI,OAAIA,EAAKC,KAAO/B,EAAOI,QAAQ2B,MAErCP,EAAUJ,KAAKQ,GAAOI,aAAehC,EAAOI,QAAQ6B,WAK1D,EAKIjB,EAAMb,QAJRoB,EADF,EACEA,mBACAE,EAFF,EAEEA,uBACAC,EAHF,EAGEA,kBACAC,EAJF,EAIEA,sBAGaX,IAAf,QA2BakB,EAAeC,aAC1B,SAACC,GAAD,OAAsBA,EAAMC,SAASb,aACrC,SAAAA,GAAS,OAAIA,KAGFc,EAAqBH,aAChC,SAACC,GAAD,OAAsBA,EAAMC,SAASb,UAAUJ,QAC/C,SAAAI,GAAS,OAAIA,EAAUe,QAAO,SAAAT,GAAI,MAA0B,WAAtBA,EAAKE,mBC9EvCQ,EAAyB,CAC7BC,IAAK,YACLC,QAASA,KAGIC,cAAgB,CAC7BnB,UAAWoB,YAAeJ,EAAwBK,KCRrCF,cAAgB,CAC7BN,SAAUS,ICqBGC,EAXDC,YAAe,CAC3BC,QAASC,EACTC,WAAY,SAAAC,GAAoB,OAC9BA,EAAqB,CACnBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,QAE3DC,OAAOhE,M,OCjBCiE,EAJC,WACd,OAAO,8C,eCEIC,EAAiB,kBAAMC,eACvBC,EAAkDC,IC8ChDC,EA3CM,SAAC,GAKI,IAJxBpC,EAIuB,EAJvBA,GACAqC,EAGuB,EAHvBA,UACAC,EAEuB,EAFvBA,SAEuB,IADvBrC,oBACuB,MADR,aACQ,EACjBlC,EAAWiE,IACXO,EAA4B,WAAjBtC,EAEXuC,EAAe,SAACC,GACpB,IAAMxC,EAAewC,EAAEC,OAAOC,MAC9B5E,ENqDF,SAACiC,EAAYE,GAAb,OAAgC,SAACnC,GAC/BA,EAAS,CAAEI,KAAMyB,EAAsBzB,KAAME,QAAS,CAAE2B,KAAIE,aMtDnD0C,CAAqB5C,EAAIC,KAGpC,OACE,+BACE,sBACE4C,MAAO,CAAEC,MAAOP,EAAW,OAAS,IADtC,mBAEKD,EAFL,YAEiBD,KACjB,gCACE,kCACE,uBACElE,KAAK,QACLwE,MAAM,aACNI,SAAUR,EACVS,SAAUR,IALd,gBAQS,IACT,kCACE,uBACErE,KAAK,QACLwE,MAAM,SACNI,QAASR,EACTS,SAAUR,IALd,iBAdKxC,ICJEiD,EAfO,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOzD,EAAgC,EAAhCA,UAC9B,OACE,gCACE,6BAAKyD,IACL,6BACGzD,EAAU0D,OACT1D,EAAU2D,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,eAA+BA,GAAZA,EAAIrD,OAE5C,6C,iBCkDKsD,EA/BG,WAChB,IAAMvF,EAAWiE,IACXvC,EAAYyC,EAAe/B,GACjC,EAA4CoD,mBAA2B,IAAvE,mBAAOC,EAAP,KAAuBC,EAAvB,KAWA,OATAC,qBAAU,WACR3F,GRmBI,SAACA,EAAuB4F,GACNA,IAAWrD,SAAzBb,UAEOJ,KAAK8D,QAClBpF,EACEL,EAAa,CACXY,IATE,SAUFG,QAASe,EAAmBrB,KAC5BO,UAAWiB,EAAkBxB,KAC7BQ,QAASe,EAAuBvB,aQ3BrC,CAACJ,IAEJ2F,qBAAU,WACR,IAAME,EA9Bc,SAACnE,GAIvB,IAHA,IAAMoE,EAAQ,IAAIC,WAAW,GACvBN,EAAmC,GAFS,WAIzCO,GACP,IAAMC,EAAWC,OAAOC,aAAaL,EAAQE,GACvCI,EAAoB1E,EACvBe,QAAO,SAAAT,GAAI,OAAIA,EAAKuC,SAAS,GAAG8B,gBAAkBJ,KAClDK,MAAK,SAACnG,EAAGoG,GAAJ,OAAUpG,EAAEoE,SAASiC,cAAcD,EAAEhC,aAEvCkC,EAAQ,CACZtB,MAAOc,EACPvE,UAAW0E,GAEbX,EAAeiB,KAAKD,IAVbT,EAAI,EAAGA,EANU,GAMeA,IAAM,EAAtCA,GAaT,OAAOP,EAaoBkB,CAAgBjF,EAAUJ,MACnDoE,EAAkBG,KACjB,CAACnE,EAAUJ,OAEPI,EAAUH,QACf,cAAC,EAAD,IAEA,gCACE,sBAAKqF,UAAWC,IAAK1B,MAArB,UACE,2CACA,0BAEF,qBAAKyB,UAAWC,IAAKnF,UAArB,SACG+D,EAAeJ,KAAI,SAAAoB,GAAK,OACvB,cAAC,EAAD,eAAqCA,GAAjBA,EAAMtB,gB,gBCvCrB2B,EAVM,SAAC,GAAqD,IAAnDvC,EAAkD,EAAlDA,SAAUD,EAAwC,EAAxCA,UAAWyC,EAA6B,EAA7BA,IAC3C,OACE,uCACMxC,EADN,YACkBD,EADlB,cACiC0C,IAAOD,GAAKE,OACzC,2BCSOC,EAbO,SAAC,GAA8C,IAA5C/B,EAA2C,EAA3CA,MAAOzD,EAAoC,EAApCA,UAC9B,OACE,gCACE,6BAAKyD,IACL,6BACGzD,EAAU2D,KAAI,SAAA8B,GAAQ,OACrB,cAAC,EAAD,eAAoCA,GAAjBA,EAASlF,a,iBCiDvBmF,GA5BG,WAChB,IAAM1F,EAAY0C,YAAY5B,GAC9B,EAA4CgD,mBAA2B,IAAvE,mBAAO6B,EAAP,KAAuBC,EAAvB,KAOA,OALA3B,qBAAU,WACR,IAAM4B,EA3BW,SAAC7F,GAIpB,IAHA,IAAM+D,EAAmC,GACnC+B,EAASR,MAASS,QAFuB,WAItCzB,GACP,IAAM0B,GAAY1B,EAAIwB,GAPJ,GAQZpB,EAAoB1E,EACvBe,QAAO,SAAAT,GAAI,OAAIgF,IAAOhF,EAAK+E,KAAKU,UAAYC,KAC5CpB,MAAK,SAACnG,EAAGoG,GAAJ,OAAUpG,EAAEoE,SAASiC,cAAcD,EAAEhC,aAE7C,IAAK6B,EAAkBhB,OAAQ,iBAE/B,IAAMqB,EAAQ,CACZtB,MAAO6B,MAASS,MAAMC,GAAUT,OAAO,QACvCvF,UAAW0E,GAEbX,EAAeiB,KAAKD,IAZbT,EAAI,EAAGA,EANI,GAMeA,IAAK,EAA/BA,GAeT,OAAOP,EAQiBkC,CAAajG,GACnC4F,EAAkBC,KACjB,CAAC7F,IAGF,gCACE,sBAAKkF,UAAWC,IAAK1B,MAArB,UACE,oDACA,0BAEF,qBAAKyB,UAAWC,IAAKe,UAArB,SACIP,EAAejC,OAGfiC,EAAehC,KAAI,SAAAoB,GAAK,OACtB,cAAC,EAAD,eAAqCA,GAAjBA,EAAMtB,UAH5B,+D,oBChCK0C,GAbe,WAC5B,OACE,sBAAKjB,UAAWC,KAAKiB,UAArB,UACE,yBAASlB,UAAWC,KAAKnF,UAAzB,SACE,cAAC,EAAD,MAEF,yBAASkF,UAAWC,KAAKe,UAAzB,SACE,cAAC,GAAD,UCFFG,GAAYC,YAAa/E,GAYhBgF,OAVf,WACE,OACE,cAAC,IAAD,CAAUhF,MAAOA,EAAjB,SACE,cAAC,cAAD,CAAa1B,QAAS,cAAC,EAAD,IAAawG,UAAWA,GAA9C,SACE,cAAC,GAAD,S,MCVRG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.135fc162.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EmployeesBirthdayView_container__1VO5d\",\"employees\":\"EmployeesBirthdayView_employees__2sSRT\",\"birthdays\":\"EmployeesBirthdayView_birthdays__1viTv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Employees_title__3TUyE\",\"employees\":\"Employees_employees__FTFDn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Birthdays_title__2KY0X\",\"birthdays\":\"Birthdays_birthdays__2BgQ3\"};","import { createAction } from '@reduxjs/toolkit';\nimport { AxiosResponse } from 'axios';\n\ninterface PayloadType {\n  url: string;\n  method?: string;\n  data?: any;\n  onStart?: string;\n  onSuccess?: string;\n  onError?: string;\n}\n\nexport const apiCallBegan = createAction<PayloadType>('api/callBegan');\nexport const apiCallSuccess =\n  createAction<AxiosResponse<any>>('api/callSuccess');\nexport const apiCallFailed = createAction<AxiosResponse<any>>('api/callFailed');\n","import axios from 'axios';\nimport { Middleware } from 'redux';\nimport * as actions from '../api';\nimport { RootState } from '../store';\n\nconst baseURL = 'https://yalantis-react-school-api.yalantis.com/api/task0';\n\nconst api: Middleware<{}, RootState> =\n  ({ dispatch }) =>\n  next =>\n  async action => {\n    if (action.type !== actions.apiCallBegan.type) return next(action);\n\n    const { url, method, data, onStart, onSuccess, onError } = action.payload;\n\n    if (onStart) dispatch({ type: onStart });\n    next(action);\n\n    try {\n      const response = await axios.request({\n        baseURL,\n        url,\n        method,\n        data,\n      });\n      dispatch(actions.apiCallSuccess(response.data));\n\n      if (onSuccess) {\n        dispatch({ type: onSuccess, payload: response.data });\n      }\n    } catch (error) {\n      dispatch(actions.apiCallFailed(error.message));\n\n      if (onError) {\n        dispatch({ type: onError, payload: error.message });\n      }\n    }\n  };\n\nexport default api;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect';\nimport { IEmployee } from '../interfaces';\nimport { apiCallBegan } from './api';\nimport type { AppDispatch, RootState } from './store';\n\ninterface EmployeesState {\n  list: IEmployee[];\n  loading: boolean;\n}\n\nconst initialState: EmployeesState = {\n  list: [],\n  loading: false,\n};\n\nconst slice = createSlice({\n  name: 'employees',\n  initialState,\n  reducers: {\n    employeesRequested: employees => {\n      employees.loading = true;\n    },\n    employeesRequestFailed: employees => {\n      employees.loading = false;\n    },\n    employeesReceived: (employees, action) => {\n      employees.list = action.payload;\n      employees.loading = false;\n    },\n    employeeStatusChanged: (\n      employees,\n      action: PayloadAction<{ id: string; status: IEmployee['activeStatus'] }>\n    ) => {\n      const index = employees.list.findIndex(\n        empl => empl.id === action.payload.id\n      );\n      employees.list[index].activeStatus = action.payload.status;\n    },\n  },\n});\n\nconst {\n  employeesRequested,\n  employeesRequestFailed,\n  employeesReceived,\n  employeeStatusChanged,\n} = slice.actions;\n\nexport default slice.reducer;\n\n// Actions Creators\nconst url = '/users';\n\nexport const loadEmployees =\n  () => (dispatch: AppDispatch, getState: () => RootState) => {\n    const { employees } = getState().entities;\n\n    if (!employees.list.length) {\n      dispatch(\n        apiCallBegan({\n          url,\n          onStart: employeesRequested.type,\n          onSuccess: employeesReceived.type,\n          onError: employeesRequestFailed.type,\n        })\n      );\n    }\n  };\n\nexport const changeEmployeeStatus =\n  (id: string, status: string) => (dispatch: AppDispatch) => {\n    dispatch({ type: employeeStatusChanged.type, payload: { id, status } });\n  };\n\n// Selectors\nexport const getEmployees = createSelector(\n  (state: RootState) => state.entities.employees,\n  employees => employees\n);\n\nexport const getActiveEmployees = createSelector(\n  (state: RootState) => state.entities.employees.list,\n  employees => employees.filter(empl => empl.activeStatus === 'active')\n);\n","import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport employeesReducer from './employees';\n\nconst employeesPersistConfig = {\n  key: 'employees',\n  storage: storage,\n};\n\nexport default combineReducers({\n  employees: persistReducer(employeesPersistConfig, employeesReducer),\n});\n","import { combineReducers } from 'redux';\nimport entitiesReducer from './entities';\n\nexport default combineReducers({\n  entities: entitiesReducer,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n  REHYDRATE,\n} from 'redux-persist';\nimport api from './middleware/api';\nimport rootReducer from './reducer';\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(api),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","const Loading = () => {\n  return <div>Loading...</div>;\n};\n\nexport default Loading;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { AppDispatch, RootState } from './store/store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { useAppDispatch } from '../hooks';\nimport { IEmployee } from '../interfaces';\nimport { changeEmployeeStatus } from '../store/employees';\n\ntype EmployeeItemProps = { activeStatus?: 'active' | 'not-active' } & IEmployee;\n\nconst EmployeeItem = ({\n  id,\n  firstName,\n  lastName,\n  activeStatus = 'not-active',\n}: EmployeeItemProps) => {\n  const dispatch = useAppDispatch();\n  const isActive = activeStatus === 'active';\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const activeStatus = e.target.value;\n    dispatch(changeEmployeeStatus(id, activeStatus));\n  };\n\n  return (\n    <li key={id}>\n      <span\n        style={{ color: isActive ? 'blue' : '' }}\n      >{`${lastName} ${firstName}`}</span>\n      <div>\n        <label>\n          <input\n            type=\"radio\"\n            value=\"not-active\"\n            checked={!isActive}\n            onChange={handleChange}\n          />\n          not active\n        </label>{' '}\n        <label>\n          <input\n            type=\"radio\"\n            value=\"active\"\n            checked={isActive}\n            onChange={handleChange}\n          />\n          active\n        </label>\n      </div>\n    </li>\n  );\n};\n\nexport default EmployeeItem;\n","import EmployeeItem from './EmployeeItem';\nimport { IEmployeeGroup } from '../interfaces';\n\nconst EmployeeGroup = ({ title, employees }: IEmployeeGroup) => {\n  return (\n    <div>\n      <h3>{title}</h3>\n      <ul>\n        {employees.length ? (\n          employees.map(emp => <EmployeeItem key={emp.id} {...emp} />)\n        ) : (\n          <span>---</span>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default EmployeeGroup;\n","import { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../hooks';\nimport { IEmployee, IEmployeeGroup } from '../interfaces';\nimport { getEmployees, loadEmployees } from '../store/employees';\nimport EmployeeGroup from './EmployeeGroup';\nimport clss from './Employees.module.css';\nimport Loading from './ui/Loading';\n\nconst LETTERS_IN_ALPHABET = 26;\n\nconst groupByAlphabet = (employees: IEmployee[]) => {\n  const aCode = 'A'.charCodeAt(0);\n  const employeeGroups: IEmployeeGroup[] = [];\n\n  for (let i = 0; i < LETTERS_IN_ALPHABET; i++) {\n    const currChar = String.fromCharCode(aCode + i);\n    const filteredEmployees = employees\n      .filter(empl => empl.lastName[0].toUpperCase() === currChar)\n      .sort((a, b) => a.lastName.localeCompare(b.lastName));\n\n    const group = {\n      title: currChar,\n      employees: filteredEmployees,\n    };\n    employeeGroups.push(group);\n  }\n\n  return employeeGroups;\n};\n\nconst Employees = () => {\n  const dispatch = useAppDispatch();\n  const employees = useAppSelector(getEmployees);\n  const [employeeGroups, setEmployeeGroups] = useState<IEmployeeGroup[]>([]);\n\n  useEffect(() => {\n    dispatch(loadEmployees());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const groupsByAlphabet = groupByAlphabet(employees.list);\n    setEmployeeGroups(groupsByAlphabet);\n  }, [employees.list]);\n\n  return employees.loading ? (\n    <Loading />\n  ) : (\n    <div>\n      <div className={clss.title}>\n        <h2>Employees</h2>\n        <hr />\n      </div>\n      <div className={clss.employees}>\n        {employeeGroups.map(group => (\n          <EmployeeGroup key={group.title} {...group} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Employees;\n","import moment from 'moment';\nimport { IEmployee } from '../interfaces';\n\ntype BirthdayItemProps = IEmployee;\n\nconst BirthdayItem = ({ lastName, firstName, dob }: BirthdayItemProps) => {\n  return (\n    <li>\n      {`${lastName} ${firstName} - ${moment(dob).format(\n        'D MMMM, YYYY [year]'\n      )}`}\n    </li>\n  );\n};\n\nexport default BirthdayItem;\n","import { IEmployeeGroup } from '../interfaces';\nimport BirthdayItem from './BirthdayItem';\n\ntype BirthdayGroupProps = IEmployeeGroup;\n\nconst BirthdayGroup = ({ title, employees }: BirthdayGroupProps) => {\n  return (\n    <div>\n      <h3>{title}</h3>\n      <ul>\n        {employees.map(employee => (\n          <BirthdayItem key={employee.id} {...employee} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default BirthdayGroup;\n","import moment from 'moment';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { IEmployee, IEmployeeGroup } from '../interfaces';\nimport { getActiveEmployees } from '../store/employees';\nimport BirthdayGroup from './BirthdayGroup';\nimport clss from './Birthdays.module.css';\n\nconst NUM_OF_MONTHS = 12;\n\nconst groupByMonth = (employees: IEmployee[]) => {\n  const employeeGroups: IEmployeeGroup[] = [];\n  const offset = moment().month();\n\n  for (let i = 0; i < NUM_OF_MONTHS; i++) {\n    const numMonth = (i + offset) % NUM_OF_MONTHS;\n    const filteredEmployees = employees\n      .filter(empl => moment(empl.dob).month() === numMonth)\n      .sort((a, b) => a.lastName.localeCompare(b.lastName));\n\n    if (!filteredEmployees.length) continue;\n\n    const group = {\n      title: moment().month(numMonth).format('MMMM'),\n      employees: filteredEmployees,\n    };\n    employeeGroups.push(group);\n  }\n\n  return employeeGroups;\n};\n\nconst Birthdays = () => {\n  const employees = useSelector(getActiveEmployees);\n  const [birthdayGroups, setBirthdayGroups] = useState<IEmployeeGroup[]>([]);\n\n  useEffect(() => {\n    const groupsByMonth = groupByMonth(employees);\n    setBirthdayGroups(groupsByMonth);\n  }, [employees]);\n\n  return (\n    <div>\n      <div className={clss.title}>\n        <h2>Employees Birthday</h2>\n        <hr />\n      </div>\n      <div className={clss.birthdays}>\n        {!birthdayGroups.length ? (\n          <p>Employees List is empty.</p>\n        ) : (\n          birthdayGroups.map(group => (\n            <BirthdayGroup key={group.title} {...group} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Birthdays;\n","import Employees from './Employees';\nimport Birthdays from './Birthdays';\nimport clss from './EmployeesBirthdayView.module.css';\n\nconst EmployeesBirthdayView = () => {\n  return (\n    <div className={clss.container}>\n      <section className={clss.employees}>\n        <Employees />\n      </section>\n      <section className={clss.birthdays}>\n        <Birthdays />\n      </section>\n    </div>\n  );\n};\n\nexport default EmployeesBirthdayView;\n","import { Provider } from 'react-redux';\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\n\nimport store from './store/store';\nimport Loading from './components/ui/Loading';\nimport EmployeesBirthdayView from './components/EmployeesBirthdayView';\n\n// const store = configureStore();\nconst persistor = persistStore(store);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<Loading />} persistor={persistor}>\n        <EmployeesBirthdayView />\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}