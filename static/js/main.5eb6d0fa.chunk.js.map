{"version":3,"sources":["components/EmployeesBirthdayView.module.css","components/Employees.module.css","components/Birthdays.module.css","store/api.js","store/employees.js","store/entities.js","store/reducer.js","store/middleware/api.js","components/ui/Loading.jsx","components/EmployeeItem.jsx","components/EmployeeGroup.jsx","components/Employees.jsx","components/BirthdayItem.jsx","components/BirthdayGroup.jsx","components/Birthdays.jsx","components/EmployeesBirthdayView.jsx","App.js","store/configureStore.js","index.js"],"names":["module","exports","apiCallBegan","createAction","apiCallSuccess","apiCallFailed","slice","createSlice","name","initialState","list","loading","reducers","employeesRequested","employees","action","employeesRequestFailed","employeesReceived","payload","employeeStatusChanged","index","findIndex","empl","id","activeStatus","status","actions","getEmployees","createSelector","state","entities","getActiveEmployees","filter","employeesPersistConfig","key","storage","combineReducers","persistReducer","employeesReducer","entitiesReducer","api","dispatch","next","a","type","url","method","data","onStart","onSuccess","onError","axios","request","baseURL","response","message","Loading","EmployeeItem","firstName","lastName","useDispatch","isActive","handleChange","e","target","value","getState","changeEmployeeStatus","style","color","checked","onChange","EmployeeGroup","title","length","map","emp","Employees","useSelector","useState","employeeGroups","setEmployeeGroups","useEffect","groupsByAlphabet","aCode","charCodeAt","i","currChar","String","fromCharCode","filteredEmployees","toUpperCase","sort","b","localeCompare","group","push","groupByAlphabet","className","clss","BirthdayItem","dob","moment","format","BirthdayGroup","employee","Birthdays","birthdayGroups","setBirthdayGroups","groupsByMonth","offset","month","numMonth","groupByMonth","birthdays","EmployeesBirthdayView","container","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,UAAY,yCAAyC,UAAY,yCAAyC,UAAY,2C,mBCAxID,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,UAAY,+B,mBCA/DD,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,UAAY,+B,6KCClDC,EAAeC,YAAa,iBAC5BC,EAAiBD,YAAa,mBAC9BE,EAAgBF,YAAa,kBCApCG,EAAQC,YAAY,CACxBC,KAAM,YACNC,aAAc,CACZC,KAAM,GACNC,SAAS,GAEXC,SAAU,CACRC,mBAAoB,SAACC,EAAWC,GAC9BD,EAAUH,SAAU,GAEtBK,uBAAwB,SAACF,EAAWC,GAClCD,EAAUH,SAAU,GAEtBM,kBAAmB,SAACH,EAAWC,GAC7BD,EAAUJ,KAAOK,EAAOG,QACxBJ,EAAUH,SAAU,GAEtBQ,sBAAuB,SAACL,EAAWC,GACjC,IAAMK,EAAQN,EAAUJ,KAAKW,WAC3B,SAAAC,GAAI,OAAIA,EAAKC,KAAOR,EAAOG,QAAQK,MAErCT,EAAUJ,KAAKU,GAAOI,aAAeT,EAAOG,QAAQO,WAK1D,EAKInB,EAAMoB,QAJRb,EADF,EACEA,mBACAG,EAFF,EAEEA,uBACAC,EAHF,EAGEA,kBACAE,EAJF,EAIEA,sBAGab,IAAf,QAyBaqB,EAAeC,aAC1B,SAAAC,GAAK,OAAIA,EAAMC,SAAShB,aACxB,SAAAA,GAAS,OAAIA,KAGFiB,EAAqBH,aAChC,SAAAC,GAAK,OAAIA,EAAMC,SAAShB,UAAUJ,QAClC,SAAAI,GAAS,OAAIA,EAAUkB,QAAO,SAAAV,GAAI,MAA0B,WAAtBA,EAAKE,mBC/DvCS,EAAyB,CAC7BC,IAAK,YACLC,QAASA,KAGIC,cAAgB,CAC7BtB,UAAWuB,YAAeJ,EAAwBK,KCRrCF,cAAgB,CAC7BN,SAAUS,I,0CC8BGC,EA7Bb,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACA,SAAAC,GAAI,8CACJ,WAAM3B,GAAN,6BAAA4B,EAAA,yDACM5B,EAAO6B,OAASlB,EAAqBkB,KAD3C,yCACwDF,EAAK3B,IAD7D,gBAG6DA,EAAOG,QAA1D2B,EAHV,EAGUA,IAAKC,EAHf,EAGeA,OAAQC,EAHvB,EAGuBA,KAAMC,EAH7B,EAG6BA,QAASC,EAHtC,EAGsCA,UAAWC,EAHjD,EAGiDA,QAE3CF,GAASP,EAAS,CAAEG,KAAMI,IAC9BN,EAAK3B,GANP,kBAS2BoC,IAAMC,QAAQ,CACnCC,QAfQ,2DAgBRR,MACAC,SACAC,SAbN,OASUO,EATV,OAgBIb,EAASf,EAAuB4B,EAASP,OAErCE,GAAWR,EAAS,CAAEG,KAAMK,EAAW/B,QAASoC,EAASP,OAlBjE,kDAqBIN,EAASf,EAAsB,KAAM6B,UAEjCL,GAAST,EAAS,CAAEG,KAAMM,EAAShC,QAAS,KAAMqC,UAvB1D,0DADI,wD,OCHSC,EAJC,WACd,OAAO,8C,eCgDMC,EA7CM,SAAC,GAA+C,IAA7ClC,EAA4C,EAA5CA,GAAImC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,SAAUnC,EAAmB,EAAnBA,aACzCiB,EAAWmB,cACXC,EAA4B,WAAjBrC,EAEXsC,EAAe,SAAAC,GACnB,IAAMvC,EAAeuC,EAAEC,OAAOC,MAC9BxB,EL+CgC,SAAClB,EAAIE,GAAL,OAAgB,SAACgB,EAAUyB,GAC7DzB,EAAS,CAAEG,KAAMzB,EAAsByB,KAAM1B,QAAS,CAAEK,KAAIE,aKhDjD0C,CAAqB5C,EAAIC,KAGpC,OACE,+BACE,sBACE4C,MAAO,CAAEC,MAAOR,EAAW,OAAS,IADtC,mBAEKF,EAFL,YAEiBD,KACjB,gCACE,kCACE,uBACEd,KAAK,QACLqB,MAAM,aACNK,SAAUT,EACVU,SAAUT,IALd,gBAQS,IACT,kCACE,uBACElB,KAAK,QACLqB,MAAM,SACNK,QAAST,EACTU,SAAUT,IALd,iBAdKvC,ICgBEiD,EA1BO,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAO3D,EAAgB,EAAhBA,UAC9B,OACE,gCACE,6BAAK2D,IACL,6BACG3D,EAAU4D,OACT5D,EAAU6D,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,eAA+BA,GAAZA,EAAIrD,OAE5C,6C,iBCiDKsD,EA/BG,WAChB,IAAMpC,EAAWmB,cACX9C,EAAYgE,YAAYnD,GAC9B,EAA4CoD,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAWA,OATAC,qBAAU,WACRzC,GPM+B,SAACA,EAAUyB,GACtBA,IAAWpC,SAAzBhB,UAEOJ,KAAKgE,QAClBjC,EACEvC,EAAa,CACX2C,IARI,SASJG,QAASnC,EAAmB+B,KAC5BK,UAAWhC,EAAkB2B,KAC7BM,QAASlC,EAAuB4B,aOdnC,CAACH,IAEJyC,qBAAU,WACR,IAAMC,EA9Bc,SAAArE,GAItB,IAHA,IAAMsE,EAAQ,IAAIC,WAAW,GACvBL,EAAiB,GAFY,WAI1BM,GACP,IAAMC,EAAWC,OAAOC,aAAaL,EAAQE,GACvCI,EAAoB5E,EACvBkB,QAAO,SAAAV,GAAI,OAAIA,EAAKqC,SAAS,GAAGgC,gBAAkBJ,KAClDK,MAAK,SAACjD,EAAGkD,GAAJ,OAAUlD,EAAEgB,SAASmC,cAAcD,EAAElC,aAEvCoC,EAAQ,CACZtB,MAAOc,EACPzE,UAAW4E,GAEbV,EAAegB,KAAKD,IAVbT,EAAI,EAAGA,EANU,GAMeA,IAAM,EAAtCA,GAaT,OAAON,EAaoBiB,CAAgBnF,EAAUJ,MACnDuE,EAAkBE,KACjB,CAACrE,EAAUJ,OAEPI,EAAUH,QACf,cAAC,EAAD,IAEA,gCACE,sBAAKuF,UAAWC,IAAK1B,MAArB,UACE,2CACA,0BAEF,qBAAKyB,UAAWC,IAAKrF,UAArB,SACGkE,EAAeL,KAAI,SAAAoB,GAAK,OACvB,cAAC,EAAD,eAAqCA,GAAjBA,EAAMtB,gB,gBCnCrB2B,EAhBM,SAAC,GAAkC,IAAhCzC,EAA+B,EAA/BA,SAAUD,EAAqB,EAArBA,UAAW2C,EAAU,EAAVA,IAC3C,OACE,uCACM1C,EADN,YACkBD,EADlB,cACiC4C,IAAOD,GAAKE,OACzC,2BCsBOC,EAzBO,SAAC,GAA0B,IAAxB/B,EAAuB,EAAvBA,MAAO3D,EAAgB,EAAhBA,UAC9B,OACE,gCACE,6BAAK2D,IACL,6BACG3D,EAAU6D,KAAI,SAAA8B,GAAQ,OACrB,cAAC,EAAD,eAAoCA,GAAjBA,EAASlF,a,iBCkDvBmF,EA5BG,WAChB,IAAM5F,EAAYgE,YAAY/C,GAC9B,EAA4CgD,mBAAS,IAArD,mBAAO4B,EAAP,KAAuBC,EAAvB,KAOA,OALA1B,qBAAU,WACR,IAAM2B,EA3BW,SAAA/F,GAInB,IAHA,IAAMkE,EAAiB,GACjB8B,EAASR,MAASS,QAFQ,WAIvBzB,GACP,IAAM0B,GAAY1B,EAAIwB,GAPJ,GAQZpB,EAAoB5E,EACvBkB,QAAO,SAAAV,GAAI,OAAIgF,IAAOhF,EAAK+E,KAAKU,UAAYC,KAC5CpB,MAAK,SAACjD,EAAGkD,GAAJ,OAAUlD,EAAEgB,SAASmC,cAAcD,EAAElC,aAE7C,IAAK+B,EAAkBhB,OAAQ,iBAE/B,IAAMqB,EAAQ,CACZtB,MAAO6B,MAASS,MAAMC,GAAUT,OAAO,QACvCzF,UAAW4E,GAEbV,EAAegB,KAAKD,IAZbT,EAAI,EAAGA,EANI,GAMeA,IAAK,EAA/BA,GAeT,OAAON,EAQiBiC,CAAanG,GACnC8F,EAAkBC,KACjB,CAAC/F,IAGF,gCACE,sBAAKoF,UAAWC,IAAK1B,MAArB,UACE,oDACA,0BAEF,qBAAKyB,UAAWC,IAAKe,UAArB,SACIP,EAAejC,OAGfiC,EAAehC,KAAI,SAAAoB,GAAK,OACtB,cAAC,EAAD,eAAqCA,GAAjBA,EAAMtB,UAH5B,+D,kBChCK0C,GAbe,WAC5B,OACE,sBAAKjB,UAAWC,KAAKiB,UAArB,UACE,yBAASlB,UAAWC,KAAKrF,UAAzB,SACE,cAAC,EAAD,MAEF,yBAASoF,UAAWC,KAAKe,UAAzB,SACE,cAAC,EAAD,UCHFG,GCMGC,YAAe,CACpBC,QAASC,EACTC,WAAW,GAAD,mBACLC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHtD,CAMR1F,MDbA2F,GAAYC,YAAaf,IAYhBgB,OAVf,WACE,OACE,cAAC,IAAD,CAAUhB,MAAOA,GAAjB,SACE,cAAC,cAAD,CAAa1G,QAAS,cAAC,EAAD,IAAawH,UAAWA,GAA9C,SACE,cAAC,GAAD,SEVRG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5eb6d0fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EmployeesBirthdayView_container__1VO5d\",\"employees\":\"EmployeesBirthdayView_employees__2sSRT\",\"birthdays\":\"EmployeesBirthdayView_birthdays__1viTv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Employees_title__3TUyE\",\"employees\":\"Employees_employees__FTFDn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Birthdays_title__2KY0X\",\"birthdays\":\"Birthdays_birthdays__2BgQ3\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const apiCallBegan = createAction('api/callBegan');\nexport const apiCallSuccess = createAction('api/callSuccess');\nexport const apiCallFailed = createAction('api/callFailed');\n","import { createSlice } from '@reduxjs/toolkit';\nimport { createSelector } from 'reselect';\nimport { apiCallBegan } from './api';\n\nconst slice = createSlice({\n  name: 'employees',\n  initialState: {\n    list: [],\n    loading: false,\n  },\n  reducers: {\n    employeesRequested: (employees, action) => {\n      employees.loading = true;\n    },\n    employeesRequestFailed: (employees, action) => {\n      employees.loading = false;\n    },\n    employeesReceived: (employees, action) => {\n      employees.list = action.payload;\n      employees.loading = false;\n    },\n    employeeStatusChanged: (employees, action) => {\n      const index = employees.list.findIndex(\n        empl => empl.id === action.payload.id\n      );\n      employees.list[index].activeStatus = action.payload.status;\n    },\n  },\n});\n\nconst {\n  employeesRequested,\n  employeesRequestFailed,\n  employeesReceived,\n  employeeStatusChanged,\n} = slice.actions;\n\nexport default slice.reducer;\n\n// Actions Creators\nconst url = '/users';\n\nexport const loadEmployees = () => (dispatch, getState) => {\n  const { employees } = getState().entities;\n\n  if (!employees.list.length) {\n    dispatch(\n      apiCallBegan({\n        url,\n        onStart: employeesRequested.type,\n        onSuccess: employeesReceived.type,\n        onError: employeesRequestFailed.type,\n      })\n    );\n  }\n};\n\nexport const changeEmployeeStatus = (id, status) => (dispatch, getState) => {\n  dispatch({ type: employeeStatusChanged.type, payload: { id, status } });\n};\n\n// Selectors\nexport const getEmployees = createSelector(\n  state => state.entities.employees,\n  employees => employees\n);\n\nexport const getActiveEmployees = createSelector(\n  state => state.entities.employees.list,\n  employees => employees.filter(empl => empl.activeStatus === 'active')\n);\n","import { combineReducers } from 'redux';\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\n\nimport employeesReducer from './employees';\n\nconst employeesPersistConfig = {\n  key: 'employees',\n  storage: storage,\n};\n\nexport default combineReducers({\n  employees: persistReducer(employeesPersistConfig, employeesReducer),\n});\n","import { combineReducers } from 'redux';\n\nimport entitiesReducer from './entities';\n\nexport default combineReducers({\n  entities: entitiesReducer,\n});\n","import axios from 'axios';\nimport * as actions from '../api';\n\nconst baseURL = 'https://yalantis-react-school-api.yalantis.com/api/task0';\n\nconst api =\n  ({ dispatch }) =>\n  next =>\n  async action => {\n    if (action.type !== actions.apiCallBegan.type) return next(action);\n\n    const { url, method, data, onStart, onSuccess, onError } = action.payload;\n\n    if (onStart) dispatch({ type: onStart });\n    next(action);\n\n    try {\n      const response = await axios.request({\n        baseURL,\n        url,\n        method,\n        data,\n      });\n      // General\n      dispatch(actions.apiCallSuccess(response.data));\n      // Specific\n      if (onSuccess) dispatch({ type: onSuccess, payload: response.data });\n    } catch (error) {\n      // For general scenario\n      dispatch(actions.apiCallFailed(error.message));\n      // For specific scenario\n      if (onError) dispatch({ type: onError, payload: error.message });\n    }\n  };\n\nexport default api;\n","const Loading = () => {\n  return <div>Loading...</div>;\n};\n\nexport default Loading;\n","import { useDispatch } from 'react-redux';\nimport { changeEmployeeStatus } from '../store/employees';\nimport PropTypes from 'prop-types';\n\nconst EmployeeItem = ({ id, firstName, lastName, activeStatus }) => {\n  const dispatch = useDispatch();\n  const isActive = activeStatus === 'active';\n\n  const handleChange = e => {\n    const activeStatus = e.target.value;\n    dispatch(changeEmployeeStatus(id, activeStatus));\n  };\n\n  return (\n    <li key={id}>\n      <span\n        style={{ color: isActive ? 'blue' : '' }}\n      >{`${lastName} ${firstName}`}</span>\n      <div>\n        <label>\n          <input\n            type=\"radio\"\n            value=\"not-active\"\n            checked={!isActive}\n            onChange={handleChange}\n          />\n          not active\n        </label>{' '}\n        <label>\n          <input\n            type=\"radio\"\n            value=\"active\"\n            checked={isActive}\n            onChange={handleChange}\n          />\n          active\n        </label>\n      </div>\n    </li>\n  );\n};\n\nEmployeeItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  firstName: PropTypes.string.isRequired,\n  lastName: PropTypes.string.isRequired,\n  activeStatus: PropTypes.string,\n};\n\nexport default EmployeeItem;\n","import PropTypes from 'prop-types';\n\nimport EmployeeItem from './EmployeeItem.jsx';\n\nconst EmployeeGroup = ({ title, employees }) => {\n  return (\n    <div>\n      <h3>{title}</h3>\n      <ul>\n        {employees.length ? (\n          employees.map(emp => <EmployeeItem key={emp.id} {...emp} />)\n        ) : (\n          <span>---</span>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nEmployeeGroup.propTypes = {\n  title: PropTypes.string.isRequired,\n  employees: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default EmployeeGroup;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { loadEmployees, getEmployees } from '../store/employees';\nimport EmployeeGroup from './EmployeeGroup';\nimport Loading from './ui/Loading';\nimport clss from './Employees.module.css';\n\nconst LETTERS_IN_ALPHABET = 26;\n\nconst groupByAlphabet = employees => {\n  const aCode = 'A'.charCodeAt(0);\n  const employeeGroups = [];\n\n  for (let i = 0; i < LETTERS_IN_ALPHABET; i++) {\n    const currChar = String.fromCharCode(aCode + i);\n    const filteredEmployees = employees\n      .filter(empl => empl.lastName[0].toUpperCase() === currChar)\n      .sort((a, b) => a.lastName.localeCompare(b.lastName));\n\n    const group = {\n      title: currChar,\n      employees: filteredEmployees,\n    };\n    employeeGroups.push(group);\n  }\n\n  return employeeGroups;\n};\n\nconst Employees = () => {\n  const dispatch = useDispatch();\n  const employees = useSelector(getEmployees);\n  const [employeeGroups, setEmployeeGroups] = useState([]);\n\n  useEffect(() => {\n    dispatch(loadEmployees());\n  }, [dispatch]);\n\n  useEffect(() => {\n    const groupsByAlphabet = groupByAlphabet(employees.list);\n    setEmployeeGroups(groupsByAlphabet);\n  }, [employees.list]);\n\n  return employees.loading ? (\n    <Loading />\n  ) : (\n    <div>\n      <div className={clss.title}>\n        <h2>Employees</h2>\n        <hr />\n      </div>\n      <div className={clss.employees}>\n        {employeeGroups.map(group => (\n          <EmployeeGroup key={group.title} {...group} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Employees;\n","import moment from 'moment';\nimport PropTypes from 'prop-types';\n\nconst BirthdayItem = ({ lastName, firstName, dob }) => {\n  return (\n    <li>\n      {`${lastName} ${firstName} - ${moment(dob).format(\n        'D MMMM, YYYY [year]'\n      )}`}\n    </li>\n  );\n};\n\nBirthdayItem.propTypes = {\n  lastName: PropTypes.string.isRequired,\n  firstName: PropTypes.string.isRequired,\n  dob: PropTypes.string.isRequired,\n};\n\nexport default BirthdayItem;\n","import PropTypes from 'prop-types';\n\nimport BirthdayItem from './BirthdayItem';\n\nconst BirthdayGroup = ({ title, employees }) => {\n  return (\n    <div>\n      <h3>{title}</h3>\n      <ul>\n        {employees.map(employee => (\n          <BirthdayItem key={employee.id} {...employee} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nBirthdayGroup.propTypes = {\n  title: PropTypes.string.isRequired,\n  employees: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n      dob: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default BirthdayGroup;\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport moment from 'moment';\n\nimport { getActiveEmployees } from '../store/employees';\nimport BirthdayGroup from './BirthdayGroup';\nimport clss from './Birthdays.module.css';\n\nconst NUM_OF_MONTHS = 12;\n\nconst groupByMonth = employees => {\n  const employeeGroups = [];\n  const offset = moment().month();\n\n  for (let i = 0; i < NUM_OF_MONTHS; i++) {\n    const numMonth = (i + offset) % NUM_OF_MONTHS;\n    const filteredEmployees = employees\n      .filter(empl => moment(empl.dob).month() === numMonth)\n      .sort((a, b) => a.lastName.localeCompare(b.lastName));\n\n    if (!filteredEmployees.length) continue;\n\n    const group = {\n      title: moment().month(numMonth).format('MMMM'),\n      employees: filteredEmployees,\n    };\n    employeeGroups.push(group);\n  }\n\n  return employeeGroups;\n};\n\nconst Birthdays = () => {\n  const employees = useSelector(getActiveEmployees);\n  const [birthdayGroups, setBirthdayGroups] = useState([]);\n\n  useEffect(() => {\n    const groupsByMonth = groupByMonth(employees);\n    setBirthdayGroups(groupsByMonth);\n  }, [employees]);\n\n  return (\n    <div>\n      <div className={clss.title}>\n        <h2>Employees Birthday</h2>\n        <hr />\n      </div>\n      <div className={clss.birthdays}>\n        {!birthdayGroups.length ? (\n          <p>Employees List is empty.</p>\n        ) : (\n          birthdayGroups.map(group => (\n            <BirthdayGroup key={group.title} {...group} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Birthdays;\n","import Employees from './Employees';\nimport Birthdays from './Birthdays';\nimport clss from './EmployeesBirthdayView.module.css';\n\nconst EmployeesBirthdayView = () => {\n  return (\n    <div className={clss.container}>\n      <section className={clss.employees}>\n        <Employees />\n      </section>\n      <section className={clss.birthdays}>\n        <Birthdays />\n      </section>\n    </div>\n  );\n};\n\nexport default EmployeesBirthdayView;\n","import { Provider } from 'react-redux';\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\n\nimport configureStore from './store/configureStore';\nimport Loading from './components/ui/Loading';\nimport EmployeesBirthdayView from './components/EmployeesBirthdayView';\n\nconst store = configureStore();\nconst persistor = persistStore(store);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<Loading />} persistor={persistor}>\n        <EmployeesBirthdayView />\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport rootReducer from './reducer';\nimport api from './middleware/api';\n\nexport default function () {\n  return configureStore({\n    reducer: rootReducer,\n    middleware: [\n      ...getDefaultMiddleware({\n        serializableCheck: {\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n      }),\n      api,\n    ],\n  });\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}